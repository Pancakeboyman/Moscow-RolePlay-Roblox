const { Client, GatewayIntentBits, Collection, REST, Routes, ActivityType, Events } = require('discord.js');
const fs = require('fs');
const path = require('path');
const winston = require('winston');
const { BOTTOKEN, GUILD_ID } = require('./apikeys');
const { initDatabase, getSubscribersDb, getVipDb } = require('./utils/database');
const { autoLockAllCars, syncLockedCars } = require('./cogs/autoLockCars');
const { setupGlobalErrorHandler } = require('./utils/globalErrorHandler');

// --- –õ–û–ì–ì–ï–† --- //
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.printf(({ timestamp, level, message }) => `[${timestamp}] ${level.toUpperCase()}: ${message}`)
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'data/bot.log' })
    ]
});

// --- –ü–ê–ü–ö–ò –î–ê–ù–ù–´–• --- //
["data", "data/transcripts"].forEach(folder => {
    if (!fs.existsSync(folder)) {
        fs.mkdirSync(folder, { recursive: true });
        logger.info(`üìÅ –ü–∞–ø–∫–∞ '${folder}' —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
});

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î --- //
initDatabase();
const db = getSubscribersDb();
const vipDb = typeof getVipDb === 'function' ? getVipDb() : undefined;
logger.info('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö subscribers.db –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' + (vipDb ? ' –∏ vip.db' : ''));

// --- –õ–û–ì–ò–ö–ê –ê–í–¢–û–õ–û–ö–ê --- //
if (vipDb) {
    syncLockedCars(db, vipDb, logger);
} else {
    logger.warn('‚ö†Ô∏è vipDb –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! syncLockedCars –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î.');
    syncLockedCars(db, undefined, logger);
}

// --- –ö–õ–ò–ï–ù–¢ DISCORD --- //
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
    ]
});

setupGlobalErrorHandler(client, logger);

// --- –ö–û–ú–ê–ù–î–´ --- //
client.commands = new Collection();
const commandsData = [];
const cogsPath = path.join(__dirname, 'cogs');

fs.readdirSync(cogsPath).forEach(file => {
    if (file.endsWith('.js')) {
        const cog = require(`./cogs/${file}`);
        if (cog.data && cog.execute) {
            client.commands.set(cog.data.name, cog);
            commandsData.push(cog.data.toJSON ? cog.data.toJSON() : cog.data);
            logger.info(`‚úÖ SLASH-–∫–æ–º–∞–Ω–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${file}`);
        }
        if (typeof cog.setup === 'function') {
            cog.setup(client, logger);
            logger.info(`‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω cog: ${file}`);
        }
    }
});

// --- –°–¢–ê–¢–£–° --- //
const statusMessages = [
    { name: "Moscow RolePlay Roblox", type: ActivityType.Watching }
];
let statusIndex = 0;
function changeStatus() {
    const next = statusMessages[statusIndex];
    client.user.setActivity(next.name, { type: next.type });
    logger.info(`üëÄ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: ${next.name}`);
    statusIndex = (statusIndex + 1) % statusMessages.length;
}

// --- –û–ë–†–ê–ë–û–¢–ö–ê EMBED –ù–ê–ö–ê–ó–ê–ù–ò–Ø + –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ï–¢–†–û–°–ö–ê–ù–ê --- //
const { handlePunishmentEmbed, extractWarningIdFromEmbed, isWarningIdProcessed } = require('./cogs/handlePunishmentEmbed');
const PUNISHMENT_CHANNEL_ID = '1331390930821058591';

// --- –ü–∞—Ä–∞–º–µ—Ç—Ä: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, —Å –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É (–ø–æ –ú–æ—Å–∫–≤–µ) --- //
const SCAN_START_MOSCOW = "2025-09-05T17:00:00"; // <-- –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–ú–°–ö)! –ú–µ–Ω—è–π —Ç–æ–ª—å–∫–æ —Ç—É—Ç.

// --- READY --- //
client.once(Events.ClientReady, async () => {
    setInterval(() => { if (client.user) changeStatus(); }, 5 * 60 * 1000);
    changeStatus();

    logger.info(`üöÄ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤!`);
    logger.info(`üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${client.guilds.cache.size} —Å–µ—Ä–≤–µ—Ä–∞–º`);

    // --- –†–µ—Ç—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ embed-–æ–≤ –Ω–∞–∫–∞–∑–∞–Ω–∏–π ---
    try {
        const punishmentChannel = await client.channels.fetch(PUNISHMENT_CHANNEL_ID);
        if (punishmentChannel && punishmentChannel.isTextBased?.()) {
            const moscowDate = new Date(SCAN_START_MOSCOW + "+03:00");
            logger.info(`[RetroScan] –ò—Å–ø–æ–ª—å–∑—É—é –¥–∞—Ç—É –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–ú–°–ö): ${SCAN_START_MOSCOW} => UTC: ${moscowDate.toISOString()}`);

            let lastId = undefined;
            let fetchedTotal = 0, handledCount = 0, skippedCount = 0;
            let breakLoop = false;
            while (!breakLoop) {
                const messages = await punishmentChannel.messages.fetch({ limit: 100, before: lastId }).catch(() => null);
                if (!messages || messages.size === 0) break;
                for (const message of messages.values()) {
                    fetchedTotal++;
                    if (message.createdAt < moscowDate) {
                        breakLoop = true;
                        break;
                    }
                    if (message.embeds?.length > 0 && message.embeds[0].title === "Punishment Issued") {
                        const warningId = extractWarningIdFromEmbed(message.embeds[0]);
                        if (!warningId) continue;
                        const alreadyProcessed = await isWarningIdProcessed(warningId);
                        if (!alreadyProcessed) {
                            try {
                                await handlePunishmentEmbed(message, logger);
                                handledCount++;
                            } catch (e) {
                                logger.error("[RetroScan] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ embed:", e);
                            }
                        } else {
                            skippedCount++;
                        }
                    }
                }
                lastId = messages.last()?.id;
                if (!lastId) break;
            }
            logger.info(`[RetroScan] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ embed –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${fetchedTotal}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö: ${handledCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
        } else {
            logger.warn(`[RetroScan] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–∫–∞–∑–∞–Ω–∏–π!`);
        }
    } catch (e) {
        logger.error(`[RetroScan] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: ${e}`);
    }

    // --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è SLASH-–∫–æ–º–∞–Ω–¥ ---
    try {
        const rest = new REST({ version: '10' }).setToken(BOTTOKEN);
        await rest.put(
            Routes.applicationCommands(client.user.id),
            { body: commandsData }
        );
        logger.info("üîÅ Slash-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ.");
        commandsData.forEach(cmd => logger.info(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /${cmd.name}`));
    } catch (e) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${e}`);
    }

    // --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ERLC ---
    const monitorErlc = require('./utils/monitorErlc');
    let hourlyViolations = 0;
    let lastHourlyLog = Date.now();

    setInterval(async () => {
        try {
            const result = await monitorErlc(client);
            if (result && typeof result.violations === 'number') {
                hourlyViolations += result.violations;
            }
        } catch (e) {}
        if (Date.now() - lastHourlyLog > 3600000) {
            logger.info(`[ERLC] –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${hourlyViolations}`);
            hourlyViolations = 0;
            lastHourlyLog = Date.now();
        }
    }, 15000);
});

// --- –ö–£–õ–î–ê–£–ù–´ –î–õ–Ø –ö–û–ú–ê–ù–î --- //
const lastUsed = new Map();
const COMMAND_COOLDOWN = 1500;

// --- –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–¢–ï–†–ê–ö–¶–ò–ô (–∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏, —Å–µ–ª–µ–∫—Ç—ã, –º–æ–¥–∞–ª–∫–∏, –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç) --- //
client.on(Events.InteractionCreate, async interaction => {
    if (interaction.isChatInputCommand()) {
        const now = Date.now();
        const userId = interaction.user.id;
        if (lastUsed.has(userId) && now - lastUsed.get(userId) < COMMAND_COOLDOWN) {
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ content: `‚è≥ –ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π!`, flags: 64 });
            }
            return;
        }
        lastUsed.set(userId, now);

        const command = client.commands.get(interaction.commandName);
        if (!command) return;

        try {
            await command.execute(interaction, { db, vipDb, logger, client });
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ SLASH-–∫–æ–º–∞–Ω–¥—ã: ${error}`);
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, flags: 64 });
                }
            } catch (e) {}
        }
        return;
    }

    if (interaction.isAutocomplete()) {
        const command = client.commands.get(interaction.commandName);
        if (command && typeof command.autocomplete === 'function') {
            try {
                await command.autocomplete(interaction, { db, vipDb, logger, client });
            } catch (e) {
                logger.error(`–û—à–∏–±–∫–∞ autocomplete: ${e}`);
            }
        }
        return;
    }

    if (interaction.isModalSubmit()) {
        let handled = false;
        for (const cog of client.commands.values()) {
            if (typeof cog.handleModal === 'function') {
                try {
                    const result = await cog.handleModal(interaction, { db, vipDb, logger, client });
                    if (result === true) {
                        handled = true;
                        break;
                    }
                } catch (error) {
                    logger.error(`–û—à–∏–±–∫–∞ –≤ handleModal: ${error}`);
                    try {
                        if (!interaction.replied && !interaction.deferred) {
                            await interaction.reply({ content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã: ${error.message}`, flags: 64 });
                        }
                    } catch {}
                    handled = true;
                    break;
                }
            }
        }
        if (!handled) {
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.', flags: 64 });
                }
            } catch (e) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ–ª–ª–±–µ–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã: ${e}`);
            }
        }
        return;
    }

    if (interaction.isButton()) {
        let handled = false;
        for (const cog of client.commands.values()) {
            if (typeof cog.onInteraction === 'function') {
                try {
                    const result = await cog.onInteraction(interaction, { db, vipDb, logger, client });
                    if (result === true) {
                        handled = true;
                        break;
                    }
                } catch (error) {
                    logger.error(`–û—à–∏–±–∫–∞ –≤ onInteraction: ${error}`);
                }
            }
        }
        if (!handled) {
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.', flags: 64 });
                }
            } catch (e) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ–ª–ª–±–µ–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏: ${e}`);
            }
        }
        return;
    }

    if (interaction.isStringSelectMenu()) {
        let handled = false;
        for (const cog of client.commands.values()) {
            if (typeof cog.onInteraction === 'function') {
                try {
                    const result = await cog.onInteraction(interaction, { db, vipDb, logger, client });
                    if (result === true) {
                        handled = true;
                        break;
                    }
                } catch (error) {
                    logger.error(`–û—à–∏–±–∫–∞ –≤ onInteraction (select menu): ${error}`);
                }
            }
        }
        if (!handled) {
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ–Ω—é! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ.', flags: 64 });
                }
            } catch (e) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ–ª–ª–±–µ–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: ${e}`);
            }
        }
        return;
    }
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã mrblx!erlc –∏–≥—Ä–æ–∫–∏ ===
client.on('messageCreate', async message => {
    if (message.author.bot) return;
    const content = message.content.toLowerCase().trim();

    if (content.startsWith('mrblx!erlc –∏–≥—Ä–æ–∫–∏')) {
        const cog = client.commands.get('erlc');
        if (cog && typeof cog.messageRun === 'function') {
            const args = content.split(' ').slice(1);
            await cog.messageRun(message, args, { db, vipDb, logger, client });
        }
    }
});

// === –û–ë–†–ê–ë–û–¢–ö–ê EMBED –ù–ê–ö–ê–ó–ê–ù–ò–Ø ===
client.on('messageCreate', async (message) => {
    if (message.channel.id === PUNISHMENT_CHANNEL_ID && message.embeds?.length > 0) {
        logger.info('Punishment embed –Ω–∞–π–¥–µ–Ω');
    }

    if (
        message.channel.id === PUNISHMENT_CHANNEL_ID &&
        message.embeds?.length > 0 &&
        message.embeds[0].title === 'Punishment Issued'
    ) {
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ embed –Ω–∞–∫–∞–∑–∞–Ω–∏—è!');
        try {
            await handlePunishmentEmbed(message, logger);
        } catch (e) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ embed –Ω–∞–∫–∞–∑–∞–Ω–∏—è: ${e}`);
        }
    }
});

client.login(BOTTOKEN);