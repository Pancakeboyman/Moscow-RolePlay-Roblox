const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { getSubscribersDb } = require('../utils/database');
const { ADMIN_ROLES, SUBSCRIBER_ROLE, LOG_CHANNEL } = require('../apikeys');
const {
    STATUS_LABELS,
    STATUS_ROLES
} = require('../constants');
const noblox = require('noblox.js');

const EXTRA_LOG_CHANNEL = "1363535182342262904";

// –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ noblox.js (—Ñ—É–∑–∑–∏-–ø–æ–∏—Å–∫, –¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞!)
async function robloxAutocomplete(username) {
    if (!username || typeof username !== 'string' || username.length < 3) return [];
    try {
        const users = await noblox.searchUsers(username, 10, "");
        if (!Array.isArray(users) || users.length === 0) return [];
        return users
            .filter(user => typeof user.username === 'string' && user.username.length > 0 && typeof user.userId === 'number')
            .map(user => ({
                name: `${user.username} (${user.userId})`,
                value: user.username
            }));
    } catch (e) {
        if (e.message && e.message.includes("429")) return [];
        console.error("Autocomplete error:", e);
        return [];
    }
}

// –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ userId –ø–æ –Ω–∏–∫–Ω–µ–π–º—É —á–µ—Ä–µ–∑ noblox.js
async function getRobloxId(username) {
    if (!username || typeof username !== 'string' || username.length === 0) return null;
    try {
        const userId = await noblox.getIdFromUsername(username);
        return userId || null;
    } catch (e) {
        console.error("getRobloxId error:", e);
        return null;
    }
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('–¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–¥–ø–∏—Å—á–∏–∫–∞')
    .setDescription('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    .addUserOption(option => option.setName('–¥–∏—Å–∫–æ—Ä–¥').setDescription('Discord –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setRequired(true))
    .addStringOption(option =>
        option.setName('–Ω–∏–∫_roblox')
        .setDescription('–ù–∏–∫–Ω–µ–π–º Roblox')
        .setRequired(true)
        .setAutocomplete(true)
    )
    .addIntegerOption(option => option.setName('–¥–Ω–µ–π').setDescription('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏').setRequired(true))
    .addIntegerOption(option =>
        option.setName('—Å—Ç–∞—Ç—É—Å')
        .setDescription('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏')
        .setRequired(true)
        .addChoices(
            { name: '–ê—Ä–±–∞—Ç', value: 1 },
            { name: '–¢–≤–µ—Ä—Å–∫–∞—è', value: 2 },
            { name: '–ö—Ä–µ–º–ª—å', value: 3 },
        )
    ),
  async autocomplete(interaction) {
    const focusedValue = interaction.options.getFocused();
    const res = await robloxAutocomplete(focusedValue);
    await interaction.respond(res);
  },
  async execute(interaction) {
    if (!interaction.member.roles.cache.some(role => ADMIN_ROLES.includes(role.id))) {
      return interaction.reply({
        ephemeral: true,
        embeds: [new EmbedBuilder().setTitle('‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ').setDescription('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!').setColor(0xCC2641)]
      });
    }
    const user = interaction.options.getUser('–¥–∏—Å–∫–æ—Ä–¥');
    const robloxUsername = interaction.options.getString('–Ω–∏–∫_roblox');
    const days = interaction.options.getInteger('–¥–Ω–µ–π');
    const status = interaction.options.getInteger('—Å—Ç–∞—Ç—É—Å');

    // –ü–æ–ª—É—á–∏—Ç—å userId –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∏–∫–∞ (–¥–ª—è —Å—Å—ã–ª–∫–∏)
    const robloxId = await getRobloxId(robloxUsername);

    const db = getSubscribersDb();
    db.get("SELECT * FROM subscribers WHERE discord_id = ?", [user.id], (err, row) => {
      if (row) {
        interaction.reply({
          ephemeral: true,
          embeds: [new EmbedBuilder().setTitle('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç').setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${user.id}> —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!`).setColor(0xCC2641)]
        });
        db.close();
      } else {
        const expiresAt = new Date(Date.now() + days * 24 * 60 * 60 * 1000).toISOString();
        // –•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ —á–∏—Å–ª–æ (1, 2, 3)
        db.run("INSERT INTO subscribers (discord_id, roblox_username, subscription_days, expires_at, status) VALUES (?, ?, ?, ?, ?)",
          [user.id, robloxUsername, days, expiresAt, status], async err => {
            db.close();
            if (err) return interaction.reply({ ephemeral: true, embeds: [new EmbedBuilder().setTitle('‚ùå –û—à–∏–±–∫–∞').setDescription(err.message).setColor(0xCC2641)] });
            let member = await interaction.guild.members.fetch(user.id).catch(() => null);

            // –í—ã–¥–∞—ë–º —Ä–æ–ª–∏
            let statusRoleId = STATUS_ROLES[status];
            let statusRole = interaction.guild.roles.cache.get(statusRoleId);
            let subRole = interaction.guild.roles.cache.get(SUBSCRIBER_ROLE);

            if (member) {
              // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Ä–æ–ª–∏
              for (const roleId of Object.values(STATUS_ROLES)) {
                if (member.roles.cache.has(roleId)) await member.roles.remove(roleId).catch(() => {});
              }
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—É—Å–Ω—É—é —Ä–æ–ª—å
              if (statusRole) await member.roles.add(statusRole).catch(() => {});
              // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
              if (subRole) await member.roles.add(subRole).catch(() => {});
            }

            const robloxProfile = robloxId
                ? `[${robloxUsername}](https://www.roblox.com/users/${robloxId}/profile)`
                : robloxUsername;

            await interaction.reply({
              embeds: [
                new EmbedBuilder()
                  .setTitle('‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!')
                  .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å—ë–Ω –≤ –±–∞–∑—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏.')
                  .addFields(
                    { name: 'üë§ Discord', value: `<@${user.id}>`, inline: true },
                    { name: 'üîó Roblox', value: robloxProfile, inline: true },
                    { name: '‚è≥ –î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏', value: `${days}`, inline: true },
                    { name: 'üè∑Ô∏è –°—Ç–∞—Ç—É—Å', value: STATUS_LABELS[status], inline: true },
                    { name: '–ò—Å—Ç–µ–∫–∞–µ—Ç', value: `<t:${Math.floor(new Date(expiresAt).getTime() / 1000)}:F>`, inline: true }
                  )
                  .setColor(0xCC2641)
                  .setFooter({ text: "Moscow RolePlay | ER:LC Subscriber System" })
                  .setTimestamp()
              ]
            });

            const logEmbed = new EmbedBuilder()
              .setTitle('üìù –ü–æ–¥–ø–∏—Å—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω')
              .setColor(0xCC2641)
              .addFields(
                { name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', value: `<@${interaction.user.id}>`, inline: true },
                { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `<@${user.id}>`, inline: true },
                { name: 'Roblox –Ω–∏–∫', value: robloxProfile, inline: true },
                { name: '–î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏', value: days.toString(), inline: true },
                { name: '–°—Ç–∞—Ç—É—Å', value: STATUS_LABELS[status], inline: true },
                { name: '–ò—Å—Ç–µ–∫–∞–µ—Ç', value: `<t:${Math.floor(new Date(expiresAt).getTime() / 1000)}:F>`, inline: true }
              )
              .setFooter({ text: "Moscow RolePlay | ER:LC Subscriber System" })
              .setTimestamp();

            if (LOG_CHANNEL) {
              const channel = interaction.guild.channels.cache.get(LOG_CHANNEL);
              if (channel) channel.send({ embeds: [logEmbed] });
            }
            const extraChannel = interaction.guild.channels.cache.get(EXTRA_LOG_CHANNEL);
            if (extraChannel) extraChannel.send({ embeds: [logEmbed] });

            await user.send({
              embeds: [
                new EmbedBuilder()
                  .setTitle('üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
                  .setDescription(
                    `**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ **${days} –¥–Ω–µ–π**.\n\n` +
                    `**–í–∞—à Roblox –Ω–∏–∫–Ω–µ–π–º:** ${robloxProfile}\n` +
                    `**–°—Ç–∞—Ç—É—Å:** ${STATUS_LABELS[status]}\n`
                  )
                  .addFields(
                    { name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', value: '‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ <#1342209500572029059>).\n‚Ä¢ –û—Å–æ–±—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ –±–æ–Ω—É—Å—ã\n‚Ä¢ –ü—Ä—è–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–¥–æ–±–Ω–µ–µ –≤ <#1375539483377799250>).', inline: false }
                  )
                  .setColor(0xCC2641)
                  .setFooter({ text: "Moscow RolePlay Roblox | –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!" })
                  .setTimestamp()
              ]
            }).catch(() => {});
          });
      }
    });
  }
};