const {
  SlashCommandBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  EmbedBuilder,
  PermissionFlagsBits
} = require('discord.js');

const REPORT_CHANNEL_ID = '1404370357573386341'; // <--- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
const ALLOWED_ROLE_IDS = ['1331333367743910033', '1368561596921548900', '1364920071201361920']; // <--- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
const THUMBNAIL_URL =
  'https://cdn.discordapp.com/attachments/1363556047704293517/1404369256182972436/--Moscow-RolePlay-Roblox.png?ex=689af04a&is=68999eca&hm=d79964e1d947662a9c5c7aac3b3ac9a95189d80a790b200d819104664e45eb7d&';
const EMBED_COLOR = 0xcc2641;

module.exports = {
  data: new SlashCommandBuilder()
    .setName('–æ—Ç—á—ë—Ç_–∫–æ–º–∞–Ω–¥—ã')
    .setDescription('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∏–≥—Ä–µ'),

  async execute(interaction) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å
    if (
      !interaction.member.roles.cache.some((role) =>
        ALLOWED_ROLE_IDS.includes(role.id)
      )
    ) {
      await interaction.reply({
        content: '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
        ephemeral: true
      });
      return;
    }

    const modal = new ModalBuilder()
      .setCustomId('report_command_modal')
      .setTitle('–û—Ç—á—ë—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');

    const commandInput = new TextInputBuilder()
      .setCustomId('command_used')
      .setLabel('–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏?')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const reasonInput = new TextInputBuilder()
      .setCustomId('command_reason')
      .setLabel('–° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É?')
      .setStyle(TextInputStyle.Paragraph)
      .setRequired(true);

    const timeInput = new TextInputBuilder()
      .setCustomId('when_used')
      .setLabel('–ö–æ–≥–¥–∞ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞? (–¥–∞—Ç–∞/–≤—Ä–µ–º—è)')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const logLinkInput = new TextInputBuilder()
      .setCustomId('log_link')
      .setLabel('–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ ID)')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const additionalInput = new TextInputBuilder()
      .setCustomId('additional_info')
      .setLabel('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)')
      .setStyle(TextInputStyle.Paragraph)
      .setRequired(false);

    modal.addComponents(
      new ActionRowBuilder().addComponents(commandInput),
      new ActionRowBuilder().addComponents(reasonInput),
      new ActionRowBuilder().addComponents(timeInput),
      new ActionRowBuilder().addComponents(logLinkInput),
      new ActionRowBuilder().addComponents(additionalInput)
    );

    await interaction.showModal(modal);
  },

  async handleModal(interaction) {
    if (interaction.customId !== 'report_command_modal') return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –∫–∞–∫ –∏ –≤ execute)
    if (
      !interaction.member.roles.cache.some((role) =>
        ALLOWED_ROLE_IDS.includes(role.id)
      )
    ) {
      await interaction.reply({
        content: '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞.',
        ephemeral: true
      });
      return;
    }

    const commandUsed = interaction.fields.getTextInputValue('command_used');
    const commandReason = interaction.fields.getTextInputValue('command_reason');
    const whenUsed = interaction.fields.getTextInputValue('when_used');
    const logLink = interaction.fields.getTextInputValue('log_link');
    const additionalInfo =
      interaction.fields.getTextInputValue('additional_info') || '‚Äî';

    const embed = new EmbedBuilder()
      .setTitle('üìù –û—Ç—á—ë—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã')
      .addFields(
        { name: '–ö–æ–º–∞–Ω–¥–∞', value: commandUsed, inline: true },
        { name: '–¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', value: commandReason, inline: false },
        { name: '–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', value: whenUsed, inline: false },
        { name: '–õ–æ–≥/—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ', value: logLink, inline: false },
        { name: '–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', value: additionalInfo, inline: false }
      )
      .setAuthor({
        name: `${interaction.user.tag}`,
        iconURL: interaction.user.displayAvatarURL()
      })
      .setThumbnail(THUMBNAIL_URL)
      .setTimestamp(new Date())
      .setFooter({ text: `ID: ${interaction.user.id}` })
      .setColor(EMBED_COLOR);

    const reportChannel = await interaction.client.channels.fetch(
      REPORT_CHANNEL_ID
    );
    if (reportChannel && reportChannel.isTextBased()) {
      await reportChannel.send({ embeds: [embed] });
      await interaction.reply({
        content: '–í–∞—à –æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
        ephemeral: true
      });
    } else {
      await interaction.reply({
        content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤!',
        ephemeral: true
      });
    }
  }
};