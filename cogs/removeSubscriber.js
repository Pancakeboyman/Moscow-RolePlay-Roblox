const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { SUBSCRIBER_ROLE, LOG_CHANNEL, ADMIN_ROLES } = require('../apikeys');
const { getSubscribersDb } = require('../utils/database');
const { STATUS_ROLES, BOOSTER_ROLE_ID, STATUS_LABELS } = require('../constants');
const noblox = require('noblox.js');

// –ü–æ–ª—É—á–∏—Ç—å Roblox userId —á–µ—Ä–µ–∑ noblox.js (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è Roblox –±–∞–∑–∞)
async function getRobloxId(username) {
    // username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏ –Ω–µ –ø—É—Å—Ç—ã–º
    if (!username || typeof username !== 'string' || username.length === 0) return null;
    try {
        const userId = await noblox.getIdFromUsername(username);
        return userId || null;
    } catch (e) {
        console.error("getRobloxId error:", e);
        return null;
    }
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('—É–±—Ä–∞—Ç—å_–ø–æ–¥–ø–∏—Å—á–∏–∫–∞')
        .setDescription('–£–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
        .addUserOption(option =>
            option.setName('–¥–∏—Å–∫–æ—Ä–¥')
                .setDescription('Discord –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                .setRequired(true)
        ),
    async execute(interaction) {
        if (!interaction.member.roles.cache.some(role => ADMIN_ROLES.includes(role.id))) {
            return interaction.reply({
                ephemeral: true,
                embeds: [new EmbedBuilder().setDescription('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!').setColor(0xF31F1F)]
            });
        }
        const user = interaction.options.getUser('–¥–∏—Å–∫–æ—Ä–¥');
        const db = getSubscribersDb();
        db.get("SELECT roblox_username, subscription_days, status, booster FROM subscribers WHERE discord_id = ?", [user.id], async (err, row) => {
            if (!row) {
                await interaction.reply({ ephemeral: true, embeds: [new EmbedBuilder().setDescription(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${user.id}> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!`).setColor(0xF31F1F)] });
                db.close();
                return;
            }
            db.run("DELETE FROM subscribers WHERE discord_id = ?", [user.id]);
            try {
                const member = await interaction.guild.members.fetch(user.id);
                if (member) {
                    // –°–Ω–∏–º–∞–µ–º —Ä–æ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
                    const subscriberRole = interaction.guild.roles.cache.get(SUBSCRIBER_ROLE);
                    if (subscriberRole && member.roles.cache.has(subscriberRole.id)) {
                        await member.roles.remove(subscriberRole).catch((e) => {console.error("–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:", e);});
                    }
                    // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Ä–æ–ª–∏
                    Object.values(STATUS_ROLES).forEach(roleId => {
                        const role = interaction.guild.roles.cache.get(roleId);
                        if (role && member.roles.cache.has(role.id)) {
                            member.roles.remove(role).catch((e) => {console.error(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–π (${role.name}):`, e);});
                        }
                    });
                    // –°–Ω–∏–º–∞–µ–º —Ä–æ–ª—å –±—É—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    const boosterRole = interaction.guild.roles.cache.get(BOOSTER_ROLE_ID);
                    if (boosterRole && member.roles.cache.has(boosterRole.id)) {
                        await member.roles.remove(boosterRole).catch((e) => {console.error("–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏ –±—É—Å—Ç–µ—Ä–∞:", e);});
                    }
                }
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–µ–π:", e);
            }
            await interaction.reply({ embeds: [new EmbedBuilder().setDescription(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${user.id}> —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –∏ –ª–∏—à—ë–Ω –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.`).setColor(0xF31F1F)] });

            // –ü–æ–ª—É—á–∞–µ–º Roblox userId –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ noblox.js
            let robloxProfile = row.roblox_username;
            const robloxId = await getRobloxId(row.roblox_username);
            if (robloxId) {
                robloxProfile = `[${row.roblox_username}](https://www.roblox.com/users/${robloxId}/profile)`;
            }

            try {
                const channel = interaction.guild.channels.cache.get(LOG_CHANNEL);
                if (channel) {
                    let statusText = row.booster ? STATUS_LABELS[BOOSTER_ROLE_ID] : (STATUS_LABELS[row.status] || '–ù–µ—Ç');
                    channel.send({ embeds: [new EmbedBuilder()
                        .setTitle('üóëÔ∏è –ü–æ–¥–ø–∏—Å—á–∏–∫ —É–¥–∞–ª—ë–Ω')
                        .addFields(
                            { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `<@${user.id}>` },
                            { name: 'Roblox –Ω–∏–∫', value: robloxProfile },
                            { name: '–ë—ã–ª–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏', value: String(row.subscription_days) },
                            { name: '–°—Ç–∞—Ç—É—Å', value: statusText }
                        ).setColor(0xF31F1F)] });
                }
            } catch (e) { }
            db.close();
        });
    }
};