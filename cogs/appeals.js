const {
    SlashCommandBuilder,
    ActionRowBuilder,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    EmbedBuilder,
    ButtonBuilder,
    ButtonStyle
} = require('discord.js');
const { 
    saveAppeal, 
    saveAppealButton, 
    removeAppealButton, 
    getAppealButton,
    isAppealBlocked // <--- –¥–æ–±–∞–≤–ª–µ–Ω–æ!
} = require('../utils/database');
const { DateTime } = require('luxon');
const { v4: uuidv4 } = require('uuid');

let shopModule;
try { shopModule = require('./storeV2Cog'); } catch {}

const LOG_CHANNEL_ID = '1363535182342262904';
const APPEAL_CHANNEL_ID = '1363535639529652466';
const GUILD_ID = '1331331077553262765';

function safeCustomId(id) {
    if (!id) return '';
    return id.length > 100 ? id.slice(0, 97) + '...' : id;
}

function safeEmbedField(field, max = 1024) {
    if (!field) return '';
    if (typeof field !== 'string') field = String(field);
    if (field.length > max) return field.slice(0, max - 3) + '...';
    return field;
}

function createAppealModal() {
    return new ModalBuilder()
        .setCustomId('appeal_modal')
        .setTitle('üìù –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —Ä–∞–∑–±–∞–Ω')
        .addComponents(
            new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId('roblox_username')
                    .setLabel('–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º Roblox')
                    .setPlaceholder('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à Roblox –Ω–∏–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: MalovYT)')
                    .setRequired(true)
                    .setStyle(TextInputStyle.Short)
            ),
            new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId('ban_date')
                    .setLabel('–ö–æ–≥–¥–∞ –≤—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã?')
                    .setPlaceholder('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –±–∞–Ω–∞')
                    .setRequired(true)
                    .setStyle(TextInputStyle.Short)
            ),
            new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId('ban_reason')
                    .setLabel('–ü–æ—á–µ–º—É –≤—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã?')
                    .setPlaceholder('–û–ø–∏—à–∏—Ç–µ, –∑–∞ —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω')
                    .setRequired(true)
                    .setStyle(TextInputStyle.Paragraph)
                    .setMaxLength(4000)
            ),
            new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId('appeal_reason')
                    .setLabel('–ü–æ—á–µ–º—É –≤–∞—Å –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å? (3+ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)')
                    .setPlaceholder('–ü–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É –≤–∞—Å —Å—Ç–æ–∏—Ç —Ä–∞–∑–±–∞–Ω–∏—Ç—å')
                    .setRequired(true)
                    .setStyle(TextInputStyle.Paragraph)
                    .setMaxLength(4000)
            )
        );
}

function createReplyModal(targetUserId) {
    return new ModalBuilder()
        .setCustomId(safeCustomId(`reply_modal:${targetUserId}`))
        .setTitle('üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—é')
        .addComponents(
            new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId('response')
                    .setLabel('–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                    .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°')
                    .setStyle(TextInputStyle.Paragraph)
                    .setMaxLength(2000)
            )
        );
}

function getReplyActionRowUnique(targetUserId, appealId) {
    const rawId = `close_appeal_${appealId}_${uuidv4()}`;
    const customId = safeCustomId(rawId);
    return {
        row: new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId(customId)
                .setLabel('–ó–∞–∫—Ä—ã—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é')
                .setEmoji('üîí')
                .setStyle(ButtonStyle.Danger)
        ),
        customId
    };
}

function getFinalDecisionRow(mainMessageId, targetUserId, buttonCustomId) {
    return new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId(safeCustomId(`accept_appeal:${mainMessageId}:${targetUserId}:${buttonCustomId}`))
            .setLabel('‚úÖ –ê–ø–µ–ª–ª—è—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞')
            .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
            .setCustomId(safeCustomId(`reject_appeal:${mainMessageId}:${targetUserId}:${buttonCustomId}`))
            .setLabel('‚ùå –ê–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
            .setStyle(ButtonStyle.Danger)
    );
}

const APPEAL_BUTTON_PREFIXES = [
    "close_appeal_",
    "accept_appeal:",
    "reject_appeal:",
    "reply_to_user:",
    "reply_modal:"
];

function isAppealButton(customId) {
    return APPEAL_BUTTON_PREFIXES.some(prefix => customId.startsWith(prefix));
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('–∞–ø–µ–ª–ª—è—Ü–∏—è')
        .setDescription('–ê–ø–µ–ª–ª—è—Ü–∏–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è')
        .addSubcommandGroup(group =>
            group
                .setName('–Ω–∞')
                .setDescription('–î–µ–π—Å—Ç–≤–∏—è —Å –∞–ø–µ–ª–ª—è—Ü–∏—è–º–∏')
                .addSubcommand(sub =>
                    sub
                        .setName('—Ä–∞–∑–±–∞–Ω')
                        .setDescription('–ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –Ω–∞ —Ä–∞–∑–±–∞–Ω')
                )
        ),
    async execute(interaction) {
        // --- –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –ö–û–ú–ê–ù–î–´ ---
        if (
            interaction.options.getSubcommandGroup() === '–Ω–∞' &&
            interaction.options.getSubcommand() === '—Ä–∞–∑–±–∞–Ω'
        ) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏ –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã!
            const blocked = await new Promise(resolve => isAppealBlocked(interaction.user.id, resolve));
            if (blocked) {
                await interaction.reply({ content: '–í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω. –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.', flags: 64 });
                return;
            }
            await interaction.showModal(createAppealModal());
        }
    },
    async handleModal(interaction, { db, logger, client }) {
        if (interaction.customId === 'appeal_modal') {
            // –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ!
            // if (await new Promise(resolve => isAppealBlocked(interaction.user.id, resolve))) {
            //     await interaction.reply({ content: '–í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω. –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.', flags: 64 });
            //     return true;
            // }

            const roblox_username = interaction.fields.getTextInputValue('roblox_username');
            const ban_date = interaction.fields.getTextInputValue('ban_date');
            const ban_reason = interaction.fields.getTextInputValue('ban_reason');
            const appeal_reason = interaction.fields.getTextInputValue('appeal_reason');
            const user = interaction.user;
            const timestamp = DateTime.now().setZone('Europe/Moscow').toFormat('yyyy-LL-dd HH:mm:ss');
            const appealId = uuidv4();

            try {
                saveAppeal({
                    user_id: user.id,
                    roblox_username,
                    ban_date,
                    ban_reason,
                    appeal_text: appeal_reason,
                    timestamp,
                    appeal_id: appealId
                });
            } catch (e) {
                logger?.error?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏: ' + e);
            }

            const embed = new EmbedBuilder()
                .setTitle('üì• –ù–æ–≤–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —Ä–∞–∑–±–∞–Ω')
                .setColor(0xff0000)
                .addFields(
                    { name: 'üë§ Discord', value: safeEmbedField(`${user} (\`${user.id}\`)`), inline: false },
                    { name: 'üéÆ Roblox', value: safeEmbedField(roblox_username), inline: false },
                    { name: 'üìÖ –î–∞—Ç–∞ –±–∞–Ω–∞', value: safeEmbedField(ban_date), inline: false },
                    { name: 'üö´ –ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞', value: safeEmbedField(ban_reason), inline: false },
                    { name: 'üìÑ –ê–ø–µ–ª–ª—è—Ü–∏—è', value: safeEmbedField(appeal_reason, 1024), inline: false }
                )
                .setFooter({ text: `–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${timestamp}`.slice(0, 2048) })
                .setTimestamp(new Date());

            const guild = interaction.guild ?? client.guilds.cache.get(GUILD_ID);
            if (!guild) {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.', flags: 64 });
                }
                return true;
            }
            const logChannel = guild.channels.cache.get(LOG_CHANNEL_ID);
            const appealChannel = guild.channels.cache.get(APPEAL_CHANNEL_ID);

            if (logChannel) {
                await logChannel.send({ content: `üì• –ê–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç ${user}`, embeds: [embed] });
            }
            if (appealChannel) {
                const { row, customId } = getReplyActionRowUnique(user.id, appealId);
                logger?.info?.('[appeals] Saving customId for button:', customId);
                const sent = await appealChannel.send({
                    embeds: [embed],
                    components: [row]
                });
                saveAppealButton({
                    id: customId,
                    appeal_id: appealId,
                    discord_msg_id: sent.id,
                    user_id: user.id
                });
            }
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ content: '‚úÖ –ê–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.', flags: 64 });
            }
            return true;
        }

        if (interaction.customId.startsWith('reply_modal:')) {
            const targetUserId = interaction.customId.split(':')[1];
            const response = interaction.fields.getTextInputValue('response');
            try {
                const user = await client.users.fetch(targetUserId);
                const embed = new EmbedBuilder()
                    .setTitle('üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
                    .setDescription(safeEmbedField(response, 4096))
                    .setColor(0x43d67b)
                    .setFooter({ text: '–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∞–ø–µ–ª–ª—è—Ü–∏—é' });
                await user.send({ embeds: [embed] });
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: '‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°.', flags: 64 });
                }
            } catch (e) {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –õ–°.', flags: 64 });
                }
            }
            return true;
        }
    },

    async onInteraction(interaction, { db, logger, client }) {
        if (!interaction.isButton()) return false;

        // –ù–æ–≤—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫: —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏!
        if (!isAppealButton(interaction.customId)) {
            // –ù–µ –∫–Ω–æ–ø–∫–∞ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –¥—Ä—É–≥–æ–π cog –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return false;
        }

        // --- –ö–Ω–æ–ø–∫–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏ –Ω–∏–∂–µ ---
        if (interaction.customId.startsWith('close_appeal_')) {
            let handled = false;

            await new Promise((resolve) => {
                logger?.info?.('[appeals] –ü–æ–∏—Å–∫ customId –∫–Ω–æ–ø–∫–∏:', interaction.customId);
                getAppealButton(interaction.customId, async (err, buttonRow) => {
                    logger?.info?.('[appeals] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ customId:', buttonRow);
                    if (!buttonRow) {
                        if (!interaction.replied && !interaction.deferred) {
                            try {
                                await interaction.reply({ content: '‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞!', flags: 64 });
                            } catch (e) {}
                        }
                        handled = true;
                        return resolve();
                    }

                    try {
                        const components = [getFinalDecisionRow(buttonRow.discord_msg_id, buttonRow.user_id, interaction.customId)];
                        components.forEach(row => {
                            row.components.forEach(btn => {
                                if (btn.label && btn.label.length > 80) btn.setLabel(btn.label.slice(0, 77) + '...');
                                if (btn.customId && btn.customId.length > 100) btn.setCustomId(safeCustomId(btn.customId));
                            });
                        });
                        if (!interaction.replied && !interaction.deferred) {
                            await interaction.reply({
                                content: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–ø–µ–ª–ª—è—Ü–∏–∏:',
                                components,
                                flags: 64
                            });
                        }
                    } catch (e) {
                        logger?.error?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ reply (close_appeal): ' + e + '\nStack: ' + e.stack);
                    }
                    handled = true;
                    return resolve();
                });
            });
            if (handled) return true;
            return false;
        }

        if (interaction.customId.startsWith('accept_appeal:') || interaction.customId.startsWith('reject_appeal:')) {
            const [action, mainMessageId, userId, buttonCustomId] = interaction.customId.split(':');
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.update({ content: '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω.', components: [], flags: 64 });
                }

                let targetChannel = interaction.channel;
                if (targetChannel.isThread && typeof targetChannel.parent?.messages?.fetch === "function") {
                    targetChannel = targetChannel.parent;
                }
                const mainMsg = await targetChannel.messages.fetch(mainMessageId);
                const origEmbed = mainMsg.embeds[0];
                const resultText = action === 'accept_appeal'
                    ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º'
                    : '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º';
                const embed = EmbedBuilder.from(origEmbed)
                    .setFooter({ text: safeEmbedField(resultText, 2048) });
                await mainMsg.edit({ embeds: [embed], components: [] });

                if (buttonCustomId) {
                    logger?.info?.('[appeals] –£–¥–∞–ª—è–µ–º customId –∏–∑ –ë–î:', buttonCustomId);
                    removeAppealButton(buttonCustomId);
                }

                try {
                    const user = await client.users.fetch(userId);
                    if (action === 'accept_appeal') {
                        await user.send({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle('‚úÖ –í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞')
                                    .setDescription('–í—ã –±—É–¥–µ—Ç–µ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!')
                                    .setColor(0x43d67b)
                            ]
                        });
                    } else {
                        await user.send({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle('‚ùå –í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
                                    .setDescription('–ü–æ —Ä–µ—à–µ–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –≤ –±–∞–Ω–µ.')
                                    .setColor(0xff0000)
                            ]
                        });
                    }
                } catch {}
            } catch (err) {
                logger?.error?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + err);
            }
            return true;
        }

        if (interaction.customId.startsWith('reply_to_user:')) {
            const [_, userId] = interaction.customId.split(':');
            if (!interaction.replied && !interaction.deferred) {
                await interaction.showModal(createReplyModal(userId));
            }
            return true;
        }

        return false;
    }
};