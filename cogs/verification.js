const { Events } = require('discord.js');
const { ComponentType, ButtonStyle, MessageFlags, SeparatorSpacingSize } = require('discord-api-types/v10');
const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

const INSTRUCTION_CHANNEL_ID = '1331385651203145789';
const JOIN_ROLE_IDS = [
    '1331380783193264199', // "–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π"
    '1331332714258890763'
];
const VERIFIED_ROLE_ID = '1331380701756653661';
const LOG_CHANNEL_ID = '1363535182342262904';

const DATA_DIR = path.join(__dirname, '..', 'data');
const DB_PATH = path.join(DATA_DIR, 'verification.db');
const VERIFICATION_LINK = "https://blox.link/dashboard/verifications";
const YOUTUBE_TUTORIAL = "https://www.youtube.com/watch?v=SbDltmom1R8&list=PLz7SOP-guESE1V6ywCCLc1IQWiLURSvBE&index=1";

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç V2 –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ---
const instructionComponent = {
    type: ComponentType.Container,
    spoiler: false,
    components: [
        {
            type: ComponentType.MediaGallery,
            items: [
                {
                    media: {
                        url: "https://cdn.discordapp.com/attachments/1363556047704293517/1407715711744348240/-Moscow-RolePlay-Roblox-.png?ex=68a71ceb&is=68a5cb6b&hm=3ff0a7769388f2a325db711f98ee94fb6ae3be18f49e4391298c5d8e3d881aa7&"
                    }
                }
            ]
        },
        {
            type: ComponentType.TextDisplay,
            content: "# üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bloxlink"
        },
        {
            type: ComponentType.Separator,
            spacing: SeparatorSpacingSize.Large,
            divider: true
        },
        {
            type: ComponentType.TextDisplay,
            content:
                "**–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.**\n\n" +
                "üì© –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/verify` –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞.\n\n" +
                "üîó –ï—Å–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Bloxlink, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n" +
                "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ç–∏–∫–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ <#1338585898907861012>"
        },
        {
            type: ComponentType.ActionRow,
            components: [
                {
                    type: ComponentType.Button,
                    style: ButtonStyle.Link,
                    label: "üåê –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                    url: VERIFICATION_LINK
                },
                {
                    type: ComponentType.Button,
                    style: ButtonStyle.Link,
                    label: "üé• –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                    url: YOUTUBE_TUTORIAL
                }
            ]
        },
        {
            type: ComponentType.Separator,
            spacing: SeparatorSpacingSize.Large,
            divider: true
        },
        {
            type: ComponentType.TextDisplay,
            content: "### <:MoscowRolePlayRoblox:1407720150240854166> Bloxlink ‚Ä¢ Moscow RolePlay Roblox"
        },
        {
            type: ComponentType.Separator,
            spacing: SeparatorSpacingSize.Large,
            divider: true
        },
        {
            type: ComponentType.MediaGallery,
            items: [
                {
                    media: {
                        url: "https://cdn.discordapp.com/attachments/1363556047704293517/1407720803776200765/-.png?ex=68a721a9&is=68a5d029&hm=fe026823161671427235e272bc6dcfff106b24a5484058071a2dc2a73f88c2ba&"
                    }
                }
            ]
        }
    ]
};

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç V2 –¥–ª—è –õ–° –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º—É ---
function getDmVerifiedComponent(userId) {
    return {
        type: ComponentType.Container,
        spoiler: false,
        components: [
            {
                type: ComponentType.MediaGallery,
                items: [
                    {
                        media: {
                            url: "https://cdn.discordapp.com/attachments/1363556047704293517/1407723969120964638/-Moscow-RolePlay-Roblox-.png?ex=68a7249c&is=68a5d31c&hm=4e0d2dcb8b36b1ccd84410ace0343ac09db986ee0aa9fed657c183e6134c7e88&"
                        }
                    }
                ]
            },
            {
                type: ComponentType.TextDisplay,
                content: `# <@${userId}> ‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!`
            },
            {
                type: ComponentType.Separator,
                spacing: SeparatorSpacingSize.Large,
                divider: true
            },
            {
                type: ComponentType.TextDisplay,
                content:
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **<:moscowrus:1374006028185636887> Moscow RolePlay** ‚Äî —Ç–≤–æ–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n" +
                    "üéÆ –ü–æ–ª—É—á–∞–π —Ä–æ–ª–∏, –≤—ã–±–∏—Ä–∞–π —Ñ—Ä–∞–∫—Ü–∏—é –∏ –≤—Å—Ç—É–ø–∞–π –≤ –∏–≥—Ä—É.\n" +
                    "üìå –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –≤–∞–∂–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤."
            },
            {
                type: ComponentType.ActionRow,
                components: [
                    {
                        type: ComponentType.Button,
                        style: ButtonStyle.Link,
                        label: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
                        emoji: { id: "1402206531214250075", name: "ERLC" },
                        url: "https://policeroleplay.community/join/MoscowRus"
                    }
                ]
            },
            {
                type: ComponentType.TextDisplay,
                content: "**–£–¥–∞—á–∏ –∏ —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üí•**\n\n"
            },
            {
                type: ComponentType.Separator,
                spacing: SeparatorSpacingSize.Large,
                divider: true
            },
            {
                type: ComponentType.TextDisplay,
                content: "\n\n### <:MoscowRolePlayRoblox:1407720150240854166> Moscow RolePlay Roblox ‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"
            },
            {
                type: ComponentType.Separator,
                spacing: SeparatorSpacingSize.Large,
                divider: true
            },
            {
                type: ComponentType.MediaGallery,
                items: [
                    {
                        media: {
                            url: "https://cdn.discordapp.com/attachments/1363556047704293517/1407720803776200765/-.png?ex=68a721a9&is=68a5d029&hm=fe026823161671427235e272bc6dcfff106b24a5484058071a2dc2a73f88c2ba&"
                        }
                    }
                ]
            }
        ]
    };
}

// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–∞–ø–∫–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ –ë–î –µ—Å—Ç—å.
function ensureDb(logger = console) {
    try {
        if (!fs.existsSync(DATA_DIR)) {
            fs.mkdirSync(DATA_DIR, { recursive: true });
            logger.info(`[bloxlink] –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ ${DATA_DIR}`);
        }
        if (!fs.existsSync(DB_PATH)) {
            logger.info(`[bloxlink] verification.db –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω`);
        }
        const db = new sqlite3.Database(DB_PATH);
        db.run(`
            CREATE TABLE IF NOT EXISTS instructions (
                channel_id TEXT PRIMARY KEY,
                message_id TEXT
            )
        `, (err) => {
            db.close();
            if (err) {
                logger.error(`[bloxlink] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã instructions: ${err}`);
            } else {
                logger.info(`[bloxlink] –¢–∞–±–ª–∏—Ü–∞ instructions –≤ verification.db –≥–æ—Ç–æ–≤–∞`);
            }
        });
    } catch (err) {
        logger.error(`[bloxlink] –û—à–∏–±–∫–∞ –ø—Ä–∏ ensureDb: ${err && err.stack ? err.stack : err}`);
    }
}

function saveMessageId(channelId, messageId, logger = console) {
    ensureDb(logger);
    const db = new sqlite3.Database(DB_PATH);
    db.run(
        "REPLACE INTO instructions (channel_id, message_id) VALUES (?, ?)",
        [channelId, messageId],
        (err) => {
            db.close();
            if (err) logger.error(`[bloxlink] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è messageId: ${err}`);
        }
    );
}

function getMessageId(channelId, logger = console) {
    return new Promise((resolve) => {
        ensureDb(logger);
        const db = new sqlite3.Database(DB_PATH);
        db.get(
            "SELECT message_id FROM instructions WHERE channel_id = ?",
            [channelId],
            (err, row) => {
                db.close();
                if (err) logger.error(`[bloxlink] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è messageId: ${err}`);
                resolve(row ? row.message_id : null);
            }
        );
    });
}

async function resendInstruction(channel, client, logger = console) {
    try {
        const lastId = await getMessageId(channel.id, logger);
        if (lastId) {
            try {
                const oldMsg = await channel.messages.fetch(lastId);
                await oldMsg.delete();
            } catch (e) {
                logger.warn(`[bloxlink] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: ${e}`);
            }
        }
    } catch (e) {
        logger.warn(`[bloxlink] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e}`);
    }

    await new Promise(resolve => setTimeout(resolve, 1000));

    // V2 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–º–µ—Å—Ç–æ Embed
    const newMsg = await channel.send({
        flags: MessageFlags.IsComponentsV2,
        components: [instructionComponent]
    });
    saveMessageId(channel.id, newMsg.id, logger);

    const logChannel = client.channels.cache.get(LOG_CHANNEL_ID);
    if (logChannel) {
        await logChannel.send(`üì® –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ${channel.toString()}. ID: \`${newMsg.id}\``);
    }
}

module.exports = {
    name: 'bloxlink_verification',
    async setup(client, logger = console) {
        ensureDb(logger);

        // –ù–∞ –≤—Ö–æ–¥–µ - –≤—ã–¥–∞—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–æ–ª–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ JOIN_ROLE_IDS
        client.on(Events.GuildMemberAdd, async member => {
            if (!member.roles.cache.has(VERIFIED_ROLE_ID)) {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
                const rolesToAdd = JOIN_ROLE_IDS
                    .map(id => member.guild.roles.cache.get(id))
                    .filter(role => !!role);

                if (rolesToAdd.length > 0) {
                    try {
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–æ–ª–∏ —Ä–∞–∑–æ–º
                        await member.roles.add(
                            rolesToAdd.map(role => role.id),
                            { reason: "–í—ã–¥–∞–Ω—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–æ–ª–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ" }
                        );
                        const logChannel = member.guild.channels.cache.get(LOG_CHANNEL_ID);
                        if (logChannel) {
                            await logChannel.send(`üë§ ${member.toString()} –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–æ–ª–∏: ${rolesToAdd.map(r => `'${r.name}'`).join(', ')}.`);
                        }
                        logger.info(`[bloxlink] –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${member.user.tag}: ${rolesToAdd.map(r => r.name).join(', ')}`);
                    } catch (e) {
                        logger.error(`[bloxlink] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ä–æ–ª–µ–π: ${e}`);
                    }
                }
            }
        });

        // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        client.on(Events.ClientReady, async () => {
            logger.info(`[bloxlink] ClientReady: –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é`);
            const channel = client.channels.cache.get(INSTRUCTION_CHANNEL_ID);
            if (channel) {
                await resendInstruction(channel, client, logger);
            } else {
                logger.warn(`[bloxlink] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ ID ${INSTRUCTION_CHANNEL_ID}`);
            }
        });

        // –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –ø–æ—è–≤–∏–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° (—Ç–æ–∂–µ V2 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, —Å –ø–∏–Ω–≥–æ–º)
        client.on(Events.GuildMemberUpdate, async (before, after) => {
            const beforeRoles = new Set(before.roles.cache.map(role => role.id));
            const afterRoles = new Set(after.roles.cache.map(role => role.id));
            if (!beforeRoles.has(VERIFIED_ROLE_ID) && afterRoles.has(VERIFIED_ROLE_ID)) {
                try {
                    await after.send({
                        flags: MessageFlags.IsComponentsV2,
                        components: [getDmVerifiedComponent(after.id)]
                    });
                    logger.info(`[bloxlink] –õ–° —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${after.user.tag}`);
                } catch (e) {
                    logger.warn(`[bloxlink] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°: ${e}`);
                }
            }
        });

        // –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî –ù–ï —É–¥–∞–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        client.on(Events.MessageCreate, async message => {
            if (message.channel.id !== INSTRUCTION_CHANNEL_ID) return;
            if (message.author.id === client.user.id) return;
            await resendInstruction(message.channel, client, logger);
        });
    }
};